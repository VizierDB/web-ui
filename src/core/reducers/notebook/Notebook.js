/**
 * Reducer for notebook view actions.
 */

import {
    RECEIVE_WORKFLOW
} from '../../actions/project/Workflow'
import {
    CLEAR_NOTEBOOKCELL_DATASET, FETCH_NOTEBOOKCELL_CHART_ERROR,
    FETCH_NOTEBOOKCELL_DATASET_ERROR, RECEIVE_NOTEBOOKCELL_CHART,
    RECEIVE_NOTEBOOKCELL_DATASET, REQUEST_NOTEBOOKCELL_CHART,
    REQUEST_NOTEBOOKCELL_DATASET, REVERSE_NOTEBOOKCELLS, SET_NOTEBOOKCELL_BUSY,
    SET_NOTEBOOKCELL_ERROR
} from '../../actions/notebook/Notebook'
import { DatasetHandle, HATEOASReferences } from '../../util/Api'


// -----------------------------------------------------------------------------
// Helper Classes
// -----------------------------------------------------------------------------

export const RESOURCE_TYPE_CHART = 'CHART_VIEW'
export const RESOURCE_TYPE_DATASET = 'DATASET'


/**
 * Handle for a resource that is being shown as notebook cell output. The
 * resource can be a dataset or a dataset chart view. The resource type is
 * contained in property .type which is either 'DATASET' or 'CHART_VIEW'.
 * The .resource property contains the resource data returned by the API.
 *
 * Other fields are .error (indicating an error during load) and .isFetching
 * (indicating if fetching is currently in progress).
 */
class OutputResourceHandle {
    constructor(type, resource, isFetching, fetchError) {
        this.type = type
        this.resource = resource
        this.isFetching = isFetching
        this.fetchError = fetchError
    }
    /**
     * Test if the contained resource is a chart view
     */
    isChartView() {return this.type === RESOURCE_TYPE_CHART}
    /**
     * Test if the contained resource is a dataset
     */
    isDataset() {return this.type === RESOURCE_TYPE_DATASET}
}

/**
 * Shortcut for an output resource handle that is busy.
 */
const FetchResourceHandle = () => (
    new OutputResourceHandle('', null, true, null)
)

/**
 * Shortcut for chart view resource.
 */
const OutputChartViewHandle = (data) => (
    new OutputResourceHandle(RESOURCE_TYPE_CHART, data, false, null)
)

/**
 * Shortcut for datasets resource.
 */
const OutputDatasetHandle = (dataset) => (
    new OutputResourceHandle(RESOURCE_TYPE_DATASET, dataset, false, null)
)

/**
 * Shortcut for an output resource handle that contains an error.
 */
const ResourceFetchError = (fetchError) => (
    new OutputResourceHandle('', null, false, fetchError)

)

/**
 * Notebook cell handle. Represents the basic information for a cell in the
 * notebook.
 *
 * resource: Output resource handle conatining information about a resource that
 *     is being shown in the cell output section. If no dataset is being
 *     shown the value is null.
 * error: An object of title and message containing an error message that was
 *     generated by a cell action.
 * id: Unique cell identifier.
 * isBusy: Flag indicating whether the cell issued an asynchronous action and is
 *     awaiting completion.
 * module: Module from the workflow that is shown in the cell. If module is null
 *     the cell represents a placeholder for a new workflow module.
 */

class NotebookCellHandle {
    constructor(id, module, resource, isBusy, error) {
        this.id = id
        this.module = module
        this.resource = resource
        this.isBusy = isBusy
        this.error = error
    }
    /**
     * Retur a copy of this cell handle where the isBusy flag is set to true.
     */
     setBusy() {
         return new NotebookCellHandle(
             this.id,
             this.module,
             this.resource,
             true,
             this.error
         )
     }
    /**
     * Return a copy of this cell handle where the resource object is set to the
     * given value.
     */
     setResource(resource) {
         return new NotebookCellHandle(
             this.id,
             this.module,
             resource,
             false,
             null
         )
     }
     /**
      * Retur a copy of this cell handle where the error object is set to the
      * given value.
      */
      setError(error) {
          return new NotebookCellHandle(
              this.id,
              this.module,
              this.resource,
              false,
              error
          )
      }
}



// -----------------------------------------------------------------------------
// Helper Methods
// -----------------------------------------------------------------------------

/**
 * Make a copy of the list of notebook cell handles. Replace the cell at the
 * given index position with the modified cell.
 */
const copyCells = (cells, index, modifiedCell) => {
    let result = []
    for (let i = 0; i < cells.length; i++) {
        if (i === index) {
            result.push(modifiedCell)
        } else {
            result.push(cells[i])
        }
    }
    return result
}

/**
 * Convert a list of workflow modules into a list of notebook cells. Inserts
 * cells that are placeholders for workflow extensions, i.e., new workflow
 * modules.
 */
const listNotebookCells = (modules) => {
    let result = []
    for (let i = 0; i < modules.length; i++) {
        const module = modules[i]
        // Replace the links property with a HATEOASReferences object
        module.links = new HATEOASReferences(module.links)
        result.push(
            new NotebookCellHandle(result.length, null, null, false, null))
        result.push(
            new NotebookCellHandle(result.length, module, null, false, null))
    }
    result.push(
        new NotebookCellHandle(result.length, null, null, false, null))
    return result
}


// -----------------------------------------------------------------------------
// Reducer
// -----------------------------------------------------------------------------

/**
 * Components of the global state that are used by the notebook veiw.
 *
 * cells: Array of NotebookCellHandles that represent the individual cells of
 *     the notebook
 * moduleRegistry: ModuleRegistry object that contains the list of available
 *     modules for notebook cells.
 * files: List of file handles for uploaded files
 * reversed: Flag indicating whethers cells are displayed in reverse order.
 * workflow: Handle for formflow that is shown in the notebook view.
 */
const INITIAL_STATE = {
    cells: [],
    files: [],
    reversed: false,
    workflow: null
}

export const notebook = (state = INITIAL_STATE, action) => {
    switch (action.type) {
        case CLEAR_NOTEBOOKCELL_DATASET:
            return {
                ...state,
                cells: copyCells(
                    state.cells,
                    action.index,
                    state.cells[action.index].setResource(null)
                )
            }
        case FETCH_NOTEBOOKCELL_DATASET_ERROR:
        case FETCH_NOTEBOOKCELL_CHART_ERROR:
            return {
                ...state,
                cells: copyCells(
                    state.cells,
                    action.index,
                    state.cells[action.index].setResource(
                        new ResourceFetchError(action.message)
                    )
                )
            }
        case RECEIVE_NOTEBOOKCELL_CHART:
            return {
                ...state,
                cells: copyCells(
                    state.cells,
                    action.index,
                    state.cells[action.index].setResource(
                        OutputChartViewHandle(action.data)
                    )
                )
            }
        case RECEIVE_NOTEBOOKCELL_DATASET:
            return {
                ...state,
                cells: copyCells(
                    state.cells,
                    action.index,
                    state.cells[action.index].setResource(
                        OutputDatasetHandle(new DatasetHandle(action.dataset))
                    )
                )
            }
        case RECEIVE_WORKFLOW:
            return {
                ...state,
                cells: listNotebookCells(action.workflow.modules)
            }
        case REQUEST_NOTEBOOKCELL_CHART:
        case REQUEST_NOTEBOOKCELL_DATASET:
            return {
                ...state,
                cells: copyCells(
                    state.cells,
                    action.index,
                    state.cells[action.index].setResource(
                        FetchResourceHandle()
                    )
                )
            }
        case REVERSE_NOTEBOOKCELLS:
            return {...state, reversed: !state.reversed}
        case SET_NOTEBOOKCELL_BUSY:
            return {
                ...state,
                cells: copyCells(
                    state.cells,
                    action.index,
                    state.cells[action.index].setBusy()
                )
            }
        case SET_NOTEBOOKCELL_ERROR:
            return {
                ...state,
                cells: copyCells(
                    state.cells,
                    action.index,
                    state.cells[action.index].setError(action.error)
                )
            }
        default:
            return state
    }
}
