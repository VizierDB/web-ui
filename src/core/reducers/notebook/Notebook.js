/**
 * Reducer for notebook view actions.
 */

import {
    RECEIVE_WORKFLOW
} from '../../actions/project/Workflow'
import {
    CLEAR_NOTEBOOKCELL_DATASET, FETCH_NOTEBOOKCELL_DATASET_ERROR,
    RECEIVE_NOTEBOOKCELL_DATASET, REQUEST_NOTEBOOKCELL_DATASET,
    REVERSE_NOTEBOOKCELLS, SET_NOTEBOOKCELL_BUSY, SET_NOTEBOOKCELL_ERROR
} from '../../actions/notebook/Notebook'
import { DatasetHandle, HATEOASReferences } from '../../util/Api'


// -----------------------------------------------------------------------------
// Helper Classes
// -----------------------------------------------------------------------------

/**
 * Handle for dataset that is being shown as notebook cell output. Contains
 * three fields (of which only one is expected to be set at a time):
 *
 * dataset: The loaded dataset
 * error: Object of title and message representing an error message that has
 *     been generated during dataset fetching.
 * isFetching: Flag indicating whether dataset is being fetched.
 */
export class OutputDatasetHandle {
    constructor(dataset, isFetching, fetchError) {
        this.dataset = dataset
        this.isFetching = isFetching
        this.fetchError = fetchError
    }
}

/**
 * Notebook cell handle. Represents the basic information for a cell in the
 * notebook.
 *
 * dataset: Output dataset handle conatining information about a dataset that
 *     is being shown in the cell output section. If null no dataset is being
 *     shwon.
 * error: An object of title and message containing an error message that was
 *     generated by a cell action.
 * id: Unique cell identifier.
 * isBusy: Flag indicating whether the cell issued an asynchronous action and is
 *     awaiting completion.
 * module: Module from the workflow that is shown in the cell. If module is null
 *     the cell represents a placeholder for a new workflow module.
 */

class NotebookCellHandle {
    constructor(id, module, dataset, isBusy, error) {
        this.id = id
        this.module = module
        this.dataset = dataset
        this.isBusy = isBusy
        this.error = error
    }
    /**
     * Retur a copy of this cell handle where the isBusy flag is set to true.
     */
     setBusy() {
         return new NotebookCellHandle(
             this.id,
             this.module,
             this.dataset,
             true,
             this.error
         )
     }
    /**
     * Retur a copy of this cell handle where the dataset object is set to the
     * given value.
     */
     setDataset(dataset) {
         return new NotebookCellHandle(
             this.id,
             this.module,
             dataset,
             false,
             null
         )
     }
     /**
      * Retur a copy of this cell handle where the error object is set to the
      * given value.
      */
      setError(error) {
          return new NotebookCellHandle(
              this.id,
              this.module,
              this.dataset,
              false,
              error
          )
      }
}



// -----------------------------------------------------------------------------
// Helper Methods
// -----------------------------------------------------------------------------

/**
 * Make a copy of the list of notebook cell handles. Replace the cell at the
 * given index position with the modified cell.
 */
const copyCells = (cells, index, modifiedCell) => {
    let result = []
    for (let i = 0; i < cells.length; i++) {
        if (i === index) {
            result.push(modifiedCell)
        } else {
            result.push(cells[i])
        }
    }
    return result
}

/**
 * Convert a list of workflow modules into a list of notebook cells. Inserts
 * cells that are placeholders for workflow extensions, i.e., new workflow
 * modules.
 */
const listNotebookCells = (modules) => {
    let result = []
    for (let i = 0; i < modules.length; i++) {
        const module = modules[i]
        // Replace the links property with a HATEOASReferences object
        module.links = new HATEOASReferences(module.links)
        result.push(
            new NotebookCellHandle(result.length, null, null, false, null))
        result.push(
            new NotebookCellHandle(result.length, module, null, false, null))
    }
    result.push(
        new NotebookCellHandle(result.length, null, null, false, null))
    return result
}


// -----------------------------------------------------------------------------
// Reducer
// -----------------------------------------------------------------------------

/**
 * Components of the global state that are used by the notebook veiw.
 *
 * cells: Array of NotebookCellHandles that represent the individual cells of
 *     the notebook
 * moduleRegistry: ModuleRegistry object that contains the list of available
 *     modules for notebook cells.
 * files: List of file handles for uploaded files
 * reversed: Flag indicating whethers cells are displayed in reverse order.
 * workflow: Handle for formflow that is shown in the notebook view.
 */
const INITIAL_STATE = {
    cells: [],
    files: [],
    reversed: false,
    workflow: null
}

export const notebook = (state = INITIAL_STATE, action) => {
    switch (action.type) {
        case CLEAR_NOTEBOOKCELL_DATASET:
            return {
                ...state,
                cells: copyCells(
                    state.cells,
                    action.index,
                    state.cells[action.index].setDataset(null)
                )
            }
        case FETCH_NOTEBOOKCELL_DATASET_ERROR:
            return {
                ...state,
                cells: copyCells(
                    state.cells,
                    action.index,
                    state.cells[action.index].setDataset(
                        new OutputDatasetHandle(null, false, action.message)
                    )
                )
            }
        case RECEIVE_NOTEBOOKCELL_DATASET:
            return {
                ...state,
                cells: copyCells(
                    state.cells,
                    action.index,
                    state.cells[action.index].setDataset(
                        new OutputDatasetHandle(new DatasetHandle(action.dataset), false, null)
                    )
                )
            }
        case RECEIVE_WORKFLOW:
            return {
                ...state,
                cells: listNotebookCells(action.workflow.modules)
            }
        case REQUEST_NOTEBOOKCELL_DATASET:
            return {
                ...state,
                cells: copyCells(
                    state.cells,
                    action.index,
                    state.cells[action.index].setDataset(
                        new OutputDatasetHandle(null, true, null)
                    )
                )
            }
        case REVERSE_NOTEBOOKCELLS:
            return {...state, reversed: !state.reversed}
        case SET_NOTEBOOKCELL_BUSY:
            return {
                ...state,
                cells: copyCells(
                    state.cells,
                    action.index,
                    state.cells[action.index].setBusy()
                )
            }
        case SET_NOTEBOOKCELL_ERROR:
            return {
                ...state,
                cells: copyCells(
                    state.cells,
                    action.index,
                    state.cells[action.index].setError(action.error)
                )
            }
        default:
            return state
    }
}
